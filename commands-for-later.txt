func check user and pass
return refresh


func check refresh
return access


func check access
return login
(will use the username specified in token
to all quaries)


func for logout (just will remove tokens from local computer and stop session if I'll choose sockets)



about storing cerds in pg, I'll need to hash & salt them before store them

https://snyk.io/blog/secure-password-hashing-in-go/

in the future I'll also need to limit the client length of username and password


holy shit it is possible to genereate toug pg UUID like IDs for each column




so errors







need to check later what's the deal with message and long message table in pg

also later need to add to redis nothing was found string to return to client

also need to change the test function









docker run -e POSTGRES_PASSWORD=1598 --name=postgres postgres
docker run --name=redis -v /home/tal/Desktop/go-chat-app/conf/redis.conf:/etc/redis/redis.conf redis:7.2.4-alpine

HSET user:1000 username "maor"
HGET user:1000 username

HSET user:maor id:1 "hello world I'm maor"
HGET user:maor id:1

https://redis.uptrace.dev/guide/get-all-keys.html#iterating-over-keys
the iteration cause issues if tries to iterate over HSET etc', I guess it includes all valus which are not SET
CREATECREATE TABLE IF NOT EXISTS USERS (id VARCHAR(50), username VARCHAR(50), password BYTEA TABLE IF NOT EXISTS USERS (id VARCHAR(50), username VARCHAR(50), password BYTEA

	// Set hash field
	err := storeHashField(client, context.Background(), "user:1000", "username", "john_doe")
	if err != nil {
		fmt.Println("Error storing hash field:", err)
		return
	}

    eaxmple probably 



  redis.Amount(redis.Ctx, redis.Connect_to_db(), "elad")
  redis.Getall(redis.Ctx, redis.Connect_to_db(), "elad")
  redis.Set(redis.Ctx, redis.Connect_to_db(), "elad", common.Random_uuid(), "My  name is eladddd")
  redis.Delete(redis.Ctx, redis.Connect_to_db(), "elad", common.Random_uuid())
  redis.Getall(redis.Ctx, redis.Connect_to_db(), "elad")




  notes

  the indentation is different from postgres and redis need to make it the same
  1 ] 2024/1/17 19:1:3 ] maor : olaaa maorrr
c3111718-ba51-4a11-a6a7-9d14047aaa76 ] 2024/1/18 12:4:58 ] elad : testiiii
  also I want to change the get specific message in postgres to get amount of messages like in redis
  or maybe add an option to single message also in redis but idk
  
  after I done with both need to check if all postgres functions are working


  when don't find desired thing in postgres it won't throw an error, I need to change it


  must save date in redis








  





    fmt.Println(common.Convert_to_int(os.Getenv("POSTGRES_PORT")))
  postgres.Get_all_messages(postgres.Connect_to_db(), "maor")
  postgres.Add_message(postgres.Connect_to_db(), "maor", "olaaa maorrr")
  postgres.Get_message(postgres.Connect_to_db(), "62bfc1d1-c9db-44bf-aa99-2d600ba1ea34")
  postgres.Remove_message(postgres.Connect_to_db(), "62bfc1d1-c9db-44bf-aa99-2d600ba1ea34")



  HSET message:id1 date "2024-01-18" sender "user1" message "Hello, Redis!"

  172.17.0.2:6379> HGET message:id1 message
"Hello, Redis!"
172.17.0.2:6379> HGET message:id1 date
"2024-01-18"
172.17.0.2:6379> HGET message:id1 sender

the problem is that this is not good because if I would like to look for messages from specific user it may
be slow and consume a lot of resources becuase I'll have to search under all the IDs for specific user each time
so I guess that it will be better to add the date to the message it self and maybe parse it before give it to client

delete look for ID
getall look for name
get look for ID
